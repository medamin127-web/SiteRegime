{% extends 'admin_panel/adminbase.html.twig' %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('css/new_diet_style.css') }}" />
{% endblock %}

{% block body %}
    <div style="max-width: 800px; margin: 0 auto;">
        <!-- Progress Bar -->
        <div style="margin-bottom: 20px;">
            <div class="progress">
                <div class="progress-bar" role="progressbar" style="width: 50%;" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
        </div>

        <!-- Steps Content -->
        <div class="steps" data-step="1" style="display: block;">
            <!-- Step 1: Basic Diet Information -->
            <div>
                <h2>Step 1: Basic Diet Information</h2>
                <div class="form-container">
                    <!-- Diet Information Form -->
                    {{ form_start(form, {'attr': {'id': 'diet_form'}}) }}

                    {{ form_errors(form) }}

                    <div style="margin-bottom: 10px;">
                        {{ form_label(form.diet_name, 'Diet Name') }}
                        {{ form_widget(form.diet_name, {'attr': {'placeholder': 'Enter Diet Name'}}) }}
                    </div>

                    <div style="margin-bottom: 10px;">
                        {{ form_label(form.duration, 'Duration (Per Week)') }}
                        {{ form_widget(form.duration, {'attr': {'placeholder': 'Enter Duration'}}) }}
                    </div>

                    <div style="margin-bottom: 10px;">
                        {{ form_label(form.description, 'Description') }}
                        {{ form_widget(form.description, {'attr': {'placeholder': 'Enter Description'}}) }}
                    </div>

                    <div style="margin-bottom: 10px;">
                        {{ form_label(form.type, 'Type') }}
                        {{ form_widget(form.type) }}
                    </div>

                    <div style="margin-bottom: 10px;">
                        {{ form_label(form.category, 'Category') }}
                        {{ form_widget(form.category) }}
                    </div>

                    <div style="margin-bottom: 10px;">
                        {{ form_label(form.image, 'Image') }}
                        {{ form_widget(form.image) }}
                    </div>

                    <!-- Hidden input for selected meals -->
                    <input type="hidden" id="selectedMealsInput" name="selectedMeals" value="{{ selectedMeals|json_encode }}">
                    {{ form_end(form) }}
                </div>
            </div>
        </div>

        <div class="steps" data-step="2" style="display: block;">
            <!-- Step 2: Selecting Meals -->
            <div style="margin-top: 20px;">
                <h2>Step 2: Selecting Meals</h2>

                <!-- Meal Search or Filter Feature -->
                <input type="text" placeholder="Search meals..." style="width: 100%; padding: 10px; margin-bottom: 20px; border: 1px solid #ddd; border-radius: 5px;" id="searchInput">

                <div id="noMealsMessage" style="display: none; margin-top: 10px; color: red; text-align: center;">0 meals found</div>

                {% set pageSize = 9 %}
                {# Fetch the first page of meals, assuming they are sorted by some criteria #}
                {% set mealsOnPage = meals|slice(0, pageSize) %}
                {% set totalMeals = meals|length %}
                {% set totalPages = (totalMeals / pageSize)|round(0, 'ceil') %}

                <!-- Meals Grid with Pagination -->
                <div id="mealsGrid" style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px;">
                    {% for meal in mealsOnPage %}
                        <div class="meal-card" onclick="toggleMealSelection({{ meal.id }})">
                            <!-- Meal Image -->
                            <img src="{{ asset('uploads/plat_images/' ~ meal.image) }}" alt="{{ meal.nomplat }}" class="meal-image" style="width: 100%; height: 150px; object-fit: cover; border-radius: 8px;">
                            <!-- Meal Description -->
                            <p class="meal-description">{{ meal.nomplat }}</p>

                            <!-- Calories Information -->
                            <p class="calories-info">{{ meal.nbrCalories }} Calories</p>

                            <!-- Checkbox for Meal Selection -->
                            <input type="checkbox" name="selectedMeals[]" value="{{ meal.id }}" class="meal-checkbox" {% if selectedMeals|default([]) is iterable and meal.id in selectedMeals %}checked{% endif %}>
                        </div>
                    {% endfor %}
                </div>

                <!-- Pagination -->
                <div class="pagination" style="float:right">
                    {% for page in 1..totalPages %}
                        <a href="#" onclick="changePage({{ page }})" class="page-link">{{ page }}</a>
                    {% endfor %}
                </div>
            </div>
        </div>

        <!-- Previous and Next Buttons -->
        <div style="margin-top: 20px; display: flex; justify-content: space-between; position: relative;">
            <button id="prevButton" style="padding: 15px; background-color: #007bff; color: #fff; border: none; border-radius: 5px; cursor: pointer;" onclick="prevStep()">
                Previous
            </button>
            <button id="nextButton" style="padding: 15px; background-color: #007bff; color: #fff; border: none; border-radius: 5px; cursor: pointer; position: absolute; right: 0;" onclick="nextStep()">
                Next
            </button>
        </div>
    </div>

    <script>
        var selectedMeals = {{ selectedMeals|json_encode|raw }};

         // Add JavaScript for handling step navigation
        var currentStep = 1;

        // Initially hide the Previous button
        document.getElementById('prevButton').style.display = 'none';      

       function updateSelectedMealsInput() {
            document.getElementById('selectedMealsInput').value = JSON.stringify(selectedMeals);
        }
     

        function nextStep() {
            if (currentStep === 1) {
                // Validate Step 1 data before moving to Step 2
                var isValid = validateStep1();
                if (!isValid) {
                    alert("Please fill in all required fields for Step 1.");
                    return;
                }
            }

            // Check if it's the last step
            if (currentStep === 2) {
               
                // If it's the last step, update the selected meals input and submit the form
                updateSelectedMealsInput();
                document.getElementById('diet_form').submit();
                return;
            }

            // Move to the next step
            currentStep++;
            updateStepView();
        }

        function prevStep() {
            // Move to the previous step
            currentStep--;
            updateStepView();
        }

         function updateStepView() {
            // Update the view based on the current step
            document.getElementById('searchInput').value = ''; // Clear search input on step change
            changePage(1); // Reset pagination to the first page on step change

            // Toggle visibility based on the current step
            document.querySelectorAll('.steps').forEach(function (stepContent) {
                stepContent.style.display = stepContent.getAttribute('data-step') == currentStep ? 'block' : 'none';
            });

            // Update the progress bar
            var progressBar = document.querySelector('.progress-bar');
            progressBar.style.width = (currentStep - 1) * 50 + '%';

            // Update the button text based on the current step
            var nextButton = document.getElementById('nextButton');
            nextButton.textContent = currentStep === 1 ? 'Next' : 'Submit';

            // Update the visibility of the Previous button
            var prevButton = document.getElementById('prevButton');
            prevButton.style.display = currentStep === 1 ? 'none' : 'block';
        }

        function validateStep1() {
            // Implement Step 1 validation logic
            return true;
        }

        function toggleMealSelection(mealId) {
            // Toggle the checkbox for the clicked meal
            var checkbox = document.querySelector('.meal-card[data-meal-id="' + mealId + '"] .meal-checkbox');
            checkbox.checked = !checkbox.checked;
        }

 function changePage(page) {
        // Define the number of meals per page
        var mealsPerPage = 9;

        // Calculate the starting index for the current page
        var startIndex = (page - 1) * mealsPerPage;

        // Calculate the ending index for the current page
        var endIndex = startIndex + mealsPerPage;

        // Get the meals data (you need to replace this with your actual meals data)
        var allMeals = [
            {% for meal in meals %}
                {
                    id: {{ meal.id }},
                    nomplat: "{{ meal.nomplat }}",
                    image: "{{ meal.image }}"
                },
            {% endfor %}
        ];

        // Slice the meals array to get the meals for the current page
        var currentMeals = allMeals.slice(startIndex, endIndex);

        // Update the mealsGrid content dynamically
        var mealsGrid = document.getElementById('mealsGrid');
        mealsGrid.innerHTML = '';

        // Loop through the currentMeals and update the mealsGrid
        currentMeals.forEach(function (meal) {
        var mealDiv = document.createElement('div');
        mealDiv.style.border = '1px solid #ddd';
        mealDiv.style.padding = '10px';
        mealDiv.style.borderRadius = '8px';

        // Meal Image
        var mealImage = document.createElement('img');
        mealImage.src = "{{ asset('uploads/plat_images/') }}" + meal.image;
        mealImage.alt = meal.nomplat;
        mealImage.style.width = '100%';
        mealImage.style.height = '150px'; // Set the desired height
        mealImage.style.objectFit = 'cover'; // Maintain aspect ratio and cover the specified dimensions
        mealImage.style.borderRadius = '8px'
        mealDiv.appendChild(mealImage);

        // Meal Description
        var mealDescription = document.createElement('p');
        mealDescription.textContent = meal.nomplat;
        mealDiv.appendChild(mealDescription);

        // Checkbox for Meal Selection
        var checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.name = 'selectedMeals[]';
        checkbox.value = meal.id;
        checkbox.style.transform = 'scale(1.5)';
        // Check if the meal is in the selectedMeals array
        if (selectedMeals.includes(meal.id)) {
            checkbox.checked = true;
        }

        // Add a change event listener to update the selectedMeals array
        checkbox.addEventListener('change', function () {
            if (checkbox.checked) {
                selectedMeals.push(meal.id);
            } else {
                var index = selectedMeals.indexOf(meal.id);
                if (index !== -1) {
                    selectedMeals.splice(index, 1);
                }
            }
        });

        mealDiv.appendChild(checkbox);
        


          // Add a click event listener to the mealDiv
    mealDiv.addEventListener('click', function () {
        // Toggle the checkbox when the mealDiv is clicked
        checkbox.checked = !checkbox.checked;
          if (checkbox.checked) {
            selectedMeals.push(meal.id);
        } else {
            var index = selectedMeals.indexOf(meal.id);
            if (index !== -1) {
                selectedMeals.splice(index, 1);

            }
        }


        // Log the selected meal IDs (you can replace this with your desired logic)
        console.log('Selected Meal IDs:', selectedMeals);
    });
        mealsGrid.appendChild(mealDiv);
    });
    }

        // Implement logic to filter meals based on search input
    // Implement logic to filter meals based on search input
    document.getElementById('searchInput').addEventListener('input', function() {
        // Get the search input value
        var searchValue = this.value.toLowerCase();

        // Get all meal containers in the mealsGrid
        var mealContainers = document.querySelectorAll('#mealsGrid > div');

        // Variable to track if any matching meals are found
        var mealsFound = false;

        // Iterate through each meal container and check if it matches the search criteria
        mealContainers.forEach(function(container) {
            // Get the meal description text within the container
            var mealDescription = container.querySelector('p').textContent.toLowerCase();

            // Check if the meal description contains the search value
            if (mealDescription.includes(searchValue)) {
                // Display the meal container
                container.style.display = 'block';
                mealsFound = true;
            } else {
                // Hide the meal container
                container.style.display = 'none';
            }
        });

        // Display a message when no meals are found
        var noMealsMessage = document.getElementById('noMealsMessage');
        if (!mealsFound) {
            noMealsMessage.style.display = 'block';
        } else {
            noMealsMessage.style.display = 'none';
        }
    });
    </script>

{% endblock %}